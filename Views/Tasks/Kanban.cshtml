@model Dictionary<TaskManagementSys.Models.TaskStatus, List<TaskManagementSys.Models.TaskItem>>

@using TaskManagementSys.Models
@using TaskStatus = TaskManagementSys.Models.TaskStatus
@using TaskPriority = TaskManagementSys.Models.TaskPriority
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@{
    ViewData["Title"] = "Kanban-доска";
    var statuses = Enum.GetValues(typeof(TaskStatus)).Cast<TaskStatus>();
}

<div class="container mt-4">
    <h2 class="mb-4">📊 Kanban-доска</h2>

    <form method="get" class="row mb-4 g-2 align-items-end">
        @Html.AntiForgeryToken()
        @if (User.IsInRole("Admin"))
        {
            <div class="col-md-4">
                <label class="form-label">Исполнитель</label>
                <select name="userId" class="form-select" asp-items="ViewBag.Users">
                    <option value="">-- Все --</option>
                </select>
            </div>
        }
        <div class="col-md-4">
            <label class="form-label">Приоритет</label>
            <select name="priority" class="form-select">
                <option value="">-- Все --</option>
                @foreach (var p in Enum.GetValues(typeof(TaskPriority)))
                {
                    <option value="@p" selected="@(p.Equals(ViewBag.SelectedPriority))">@p</option>
                }
            </select>
        </div>
        <div class="col-md-4 d-grid">
            <button type="submit" class="btn btn-outline-primary">🔍 Фильтровать</button>
        </div>
    </form>

    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var status in statuses)
        {
            var statusId = status.ToString();
            <div class="col">
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-primary text-white fw-bold text-center">
                        @statusId
                    </div>
                    <div id="@statusId" data-status="@statusId" class="card-body bg-light" style="min-height: 200px;">
                        @if (Model.ContainsKey(status) && Model[status].Any())
                        {
                            foreach (var task in Model[status])
                            {
                                <div class="card mb-2" data-id="@task.Id">
                                    <div class="card-body">
                                        <h6 class="card-title">@task.Title</h6>
                                        <p class="card-text small">@task.Description</p>
                                        <p class="mb-1 text-muted small">
                                            📅 @task.DueDate?.ToShortDateString() <br />
                                            👤 @task.User?.Email
                                        </p>
                                        <div class="d-flex gap-2">
                                            <a asp-action="Details" asp-route-id="@task.Id" class="btn btn-sm btn-outline-secondary">Открыть</a>
                                            <button type="button"
                                        class="btn btn-sm btn-outline-primary"
                                        onclick="openEditModal(@task.Id)">
                                                ✏️ Редактировать
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted small empty-placeholder">Нет задач</p>

                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- 🪟 Модальное окно -->
<div class="modal fade" id="editModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">✏️ Редактировать задачу</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="editModalContent">
                <div class="text-center text-muted">Загрузка...</div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        const statuses = ["Новая", "В_работе", "Завершена"];


        statuses.forEach(status => {
            const column = document.getElementById(status);
            if (!column) return;

            new Sortable(column, {
                group: 'tasks',
                animation: 150,
                onAdd: function (evt) {
                    const taskId = evt.item.getAttribute('data-id');
                    const newStatus = evt.to.getAttribute('data-status');
                    updateTaskStatus(taskId, newStatus);

                    cleanupEmptyMessage(evt.from);
                    cleanupEmptyMessage(evt.to);
                },
                onRemove: function (evt) {
                    setTimeout(() => {
                        cleanupEmptyMessage(evt.from);
                    }, 100);
                }

            });
        });
        function cleanupEmptyMessage(container) {
            const isEmpty = container.querySelectorAll('.card').length === 0;
            let placeholder = container.querySelector('.empty-placeholder');

            if (isEmpty && !placeholder) {
                const p = document.createElement('p');
                p.className = 'text-muted small empty-placeholder';
                p.innerText = 'Нет задач';
                container.appendChild(p);
            }

            if (!isEmpty && placeholder) {
                placeholder.remove();
            }
        }


        function updateTaskStatus(taskId, newStatus) {
            fetch('/Tasks/UpdateStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ id: taskId, status: newStatus })
            }).then(response => {
                if (!response.ok) {
                    alert("❌ Ошибка при обновлении статуса задачи");
                }
            });
        }

        function openEditModal(id) {
            $('#editModal').modal('show');
            $('#editModalContent').html('<div class="text-center text-muted">Загрузка...</div>');
            $.get(`/Tasks/EditModal/${id}`, function (data) {
                $('#editModalContent').html(data);
            });
        }

        $(document).on('submit', '#editTaskForm', function (e) {
            e.preventDefault();
            let form = $(this);
            $.ajax({
                type: 'POST',
                url: '/Tasks/Edit',
                data: form.serialize(),
                success: function () {
                    $('#editModal').modal('hide');
                    location.reload();
                },
                error: function () {
                    alert("❌ Ошибка при сохранении");
                }
            });
        });
    </script>
}
